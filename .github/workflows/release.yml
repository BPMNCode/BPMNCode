name: Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: bpmncode
            archive_name: bpmncode-linux-amd64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: bpmncode
            archive_name: bpmncode-linux-arm64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: bpmncode.exe
            archive_name: bpmncode-windows-amd64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: bpmncode
            archive_name: bpmncode-macos-amd64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: bpmncode
            archive_name: bpmncode-macos-arm64.tar.gz

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross

      - name: Build binary
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}
          cd ../../..

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}
          cd ../../..

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.archive_name }}
          asset_name: ${{ matrix.archive_name }}
          asset_content_type: application/octet-stream